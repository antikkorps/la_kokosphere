---

interface Props {
  content: any[]
}

const { content } = Astro.props

// Fonction pour construire l'URL d'une image Sanity
function buildImageUrl(imageRef: string, width = 1200, height = 800): string {
  if (!imageRef) return "";
  
  const projectId = process.env.SANITY_STUDIO_PROJECT_ID || "j41wv78y";
  const dataset = process.env.SANITY_STUDIO_DATASET || "production";
  
  // Nettoyer la référence
  const cleanRef = imageRef
    .replace("image-", "")
    .replace("-jpg", ".jpg")
    .replace("-png", ".png")
    .replace("-webp", ".webp");

  return `https://cdn.sanity.io/images/${projectId}/${dataset}/${cleanRef}?w=${width}&h=${height}&fit=crop&auto=format`;
}

// Fonction pour traiter les marques (marks) du Portable Text
function processMarks(text: string, marks: string[] = []) {
  let processedText = text;
  
  if (marks.includes('strong')) {
    processedText = `<strong class="font-semibold text-gray-900">${processedText}</strong>`;
  }
  if (marks.includes('em')) {
    processedText = `<em class="italic">${processedText}</em>`;
  }
  if (marks.includes('underline')) {
    processedText = `<u class="underline">${processedText}</u>`;
  }
  if (marks.includes('code')) {
    processedText = `<code class="bg-gray-100 px-2 py-1 rounded text-sm font-mono text-gray-800">${processedText}</code>`;
  }
  if (marks.includes('link')) {
    // Pour les liens, on utilise une classe spéciale
    processedText = `<a href="#" class="text-primary-600 hover:text-primary-700 underline font-medium">${processedText}</a>`;
  }
  
  return processedText;
}

// Fonction pour traiter un bloc de contenu
function processBlock(block: any) {
  if (block._type === 'block') {
    const style = block.style === 'h1' ? 'text-3xl md:text-4xl font-bold mb-8 mt-12 first:mt-0 text-gray-900 leading-tight' :
                  block.style === 'h2' ? 'text-2xl md:text-3xl font-bold mb-6 mt-10 first:mt-0 text-gray-900 leading-tight' :
                  block.style === 'h3' ? 'text-xl md:text-2xl font-bold mb-4 mt-8 first:mt-0 text-gray-900 leading-tight' :
                  block.style === 'h4' ? 'text-lg md:text-xl font-bold mb-3 mt-6 first:mt-0 text-gray-900 leading-tight' :
                  block.style === 'normal' ? 'mb-6 leading-relaxed text-gray-700' :
                  'mb-6 leading-relaxed text-gray-700';
    
    const Tag = block.style === 'normal' ? 'p' : block.style;
    
    return {
      type: 'block',
      tag: Tag,
      style,
      children: block.children?.map((child: any) => ({
        text: processMarks(child.text, child.marks),
        marks: child.marks
      }))
    };
  }
  
  if (block._type === 'image') {
    return {
      type: 'image',
      asset: block.asset,
      alt: block.alt || '',
      caption: block.caption,
      hotspot: block.hotspot,
      crop: block.crop
    };
  }
  
  if (block._type === 'list') {
    return {
      type: 'list',
      listItem: block.listItem,
      children: block.children?.map((item: any) => ({
        children: item.children?.map((child: any) => ({
          text: processMarks(child.text, child.marks),
          marks: child.marks
        }))
      }))
    };
  }
  
  if (block._type === 'quote') {
    return {
      type: 'quote',
      children: block.children?.map((child: any) => ({
        text: processMarks(child.text, child.marks),
        marks: child.marks
      }))
    };
  }
  
  return null;
}

const processedBlocks = content?.map(processBlock).filter(Boolean) || [];
---

{processedBlocks.map((block) => {
  if (!block) return null;
  
  if (block.type === 'block') {
    const Tag = block.tag;
    return (
      <Tag class={block.style}>
        {block.children?.map((child: any) => (
          <Fragment set:html={child.text} />
        ))}
      </Tag>
    );
  }
  
  if (block.type === 'image') {
    // Construire l'URL de l'image Sanity avec les paramètres de crop/hotspot
    let imageUrl = '';
    if (block.asset?._ref) {
      imageUrl = buildImageUrl(block.asset._ref, 1200, 800);
    } else if (block.asset?.url) {
      imageUrl = block.asset.url;
    }
    
    return (
      <figure class="my-16 group">
        <div class="relative overflow-hidden rounded-3xl shadow-2xl aspect-[4/3] bg-gray-100">
          <img 
            src={imageUrl} 
            alt={block.alt}
            class="absolute top-0 left-0 right-0 bottom-0 w-full h-full object-cover object-center group-hover:scale-105 transition-all duration-700 ease-out"
            loading="lazy"
            style="margin: 0; padding: 0;"
          />
          {/* Overlay subtil au hover */}
          <div class="absolute inset-0 bg-black/0 group-hover:bg-black/10 transition-all duration-500"></div>
          {/* Bordure subtile */}
          <div class="absolute inset-0 rounded-3xl border-2 border-white/20 pointer-events-none"></div>
        </div>
        {block.caption && (
          <figcaption class="text-center text-gray-500 mt-6 text-sm leading-relaxed max-w-2xl mx-auto">
            <span class="inline-block bg-white/80 backdrop-blur-sm px-4 py-2 rounded-full border border-gray-200 shadow-sm">
              {block.caption}
            </span>
          </figcaption>
        )}
      </figure>
    );
  }
  
  if (block.type === 'list') {
    const ListTag = block.listItem === 'bullet' ? 'ul' : 'ol';
    const listStyle = block.listItem === 'bullet' ? 'list-disc space-y-2' : 'list-decimal space-y-2';
    
    return (
      <ListTag class={`${listStyle} ml-6 mb-6 text-gray-700`}>
        {block.children?.map((item: any) => (
          <li class="leading-relaxed">
            {item.children?.map((child: any) => (
              <Fragment set:html={child.text} />
            ))}
          </li>
        ))}
      </ListTag>
    );
  }
  
  if (block.type === 'quote') {
    return (
      <blockquote class="border-l-4 border-primary-500 pl-6 py-6 my-12 italic text-gray-700 bg-gradient-to-r from-primary-50 to-transparent rounded-r-xl shadow-sm">
        <div class="text-lg leading-relaxed">
          {block.children?.map((child: any) => (
            <Fragment set:html={child.text} />
          ))}
        </div>
      </blockquote>
    );
  }
  
  return null;
})} 